@page "/city/create"
@inject IJSRuntime _jsRuntime
@inject ICityService _cityService
@inject IStateService _stateService
@inject ICountryService _countryService
@inject NavigationManager _navigationManager

<div class="row my-2">
    <h3 class="card-title text-primary mb-3 ml-3">Create State</h3>

    <div class="col-10">
        @if (IsLoading)
        {
            <div class="text-center">
                <img src="/images/loading.gif">
            </div>
        }
        else
        {
            <EditForm Model="City" OnValidSubmit="CityCreate">
                <DataAnnotationsValidator />
                @*<ValidationSummary/>*@
                <div class="form-group">
                    <label>City Name</label>
                    <InputText @bind-Value="City.CityName" class="form-control"></InputText>
                    <ValidationMessage For="()=>City.CityName"></ValidationMessage>
                </div>

                     <div class="form-group col-6">
                    <label>Country Name</label>
                    <InputSelect @bind-Value="City.CountryId" class="form-select" @onchange="LoadStatesForCountry">
                        <option value="0" disabled="disabled" selected>--Select Country--</option>
                        @foreach (var cat in CountryList)
                        {
                            <option value="@cat.Id">@cat.CountryName</option>
                        }

                    </InputSelect>
                    <ValidationMessage For="()=>City.CountryId"></ValidationMessage>
                </div>

                <div class="form-group col-6">
                    <label>State Name</label>
                    <InputSelect @bind-Value="City.StateId" class="form-select">
                        <option value="0" disabled="disabled" selected>--Select State--</option>
                        @foreach (var cat in StateList)
                        {
                            <option value="@cat.Id">@cat.StateName</option>
                        }

                    </InputSelect>
                    <ValidationMessage For="()=>City.StateId"></ValidationMessage>
                </div>

           
                <div class="form-group col-6">
                    <div class="form-check">
                        <InputCheckbox @bind-Value="City.IsActive" class="form-check-input" checked></InputCheckbox>
                        <label class="form-check-label">Is Active</label>
                    </div>
                </div>

                <div class="form-group py-2">
                    <button class="btn btn-primary">Create</button>
                    <NavLink href="state" class="btn btn-secondary">Back to Index</NavLink>
                </div>
            </EditForm>
        }
    </div>
</div>

@code
{
    [Parameter]
    public int Id { get; set; }

    private CityCreateDTO City { get; set; } = new CityCreateDTO();
    private List<StateDTO> StateList { get; set; } = new List<StateDTO>();
    private List<CountryDTO> CountryList { get; set; } = new List<CountryDTO>();

    public bool IsLoading { get; set; }
    private string inputValue;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadData();
        }
    }


    private async Task LoadData()
    {
        IsLoading = true;
        StateHasChanged();

        var response = await _stateService.GetAllAsync<APIResponse>();
        if (response != null && response.IsSuccess)
        {
            StateList = JsonConvert.DeserializeObject<List<StateDTO>>(Convert.ToString(response.Result));
        }
        var respon = await _countryService.GetAllAsync<APIResponse>();
        if (respon != null && respon.IsSuccess)
        {
            CountryList = JsonConvert.DeserializeObject<List<CountryDTO>>(Convert.ToString(respon.Result));
        }


        IsLoading = false;
        StateHasChanged();

    }
    private async Task CityCreate()
    {
        var response = await _cityService.CreateAsync<APIResponse>(City);
        if (response != null && response.IsSuccess)
        {
            await _jsRuntime.ToastrSuccess("City Create Sucessfully.");
            _navigationManager.NavigateTo("state");
        }
        else
        {
            if (response.ErrorMessages.Count > 0)
            {
                await _jsRuntime.ToastrError(response.ErrorMessages.FirstOrDefault());
            }
        }

    }

    private async Task LoadStatesForCountry(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out int countryId))
        {
            IsLoading = true;
            StateList = await GetStatesForCountry(countryId);
            IsLoading = false;
            StateHasChanged();
        }
    }


    private async Task<List<StateDTO>> GetStatesForCountry(int countryId)
    {
        var response = await _stateService.GetAllAsync<APIResponse>();
        if (response != null && response.IsSuccess)
        {
            StateList = JsonConvert.DeserializeObject<List<StateDTO>>(Convert.ToString(response.Result));
            StateList = StateList.Where(u => u.CountryId == countryId).ToList();
            return (StateList);
        }
        return new List<StateDTO>();
    }
}
