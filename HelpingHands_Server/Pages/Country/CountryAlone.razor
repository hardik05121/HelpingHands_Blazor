@page "/countryalone"
@using HelpingHands_Models.API;
@using Newtonsoft.Json;
@inject ICountryService _countryService
@inject IJSRuntime _jsRuntime
@* @using HelpingHands_Common
 @attribute [Authorize(Roles = SD.Role_Admin)] *@

<_DeleteConfirmation IsParentComponentProcessing="IsLoading" ConfirmationChanged="ConfirmDelete_Click"></_DeleteConfirmation>
<div class="row mt-4">
    <div class="col-6">
        <h4 class="card-title text-primary">Country List</h4>
    </div>
    <div class="col-4 offset-2">
        <a href="category/create" class="btn btn-primary form-control">Add New Country </a>
    </div>
    <div class="col-12 p-3">
        @if (Countries.Any())
        {
            <table class="table table-bordered">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var objCat in Countries)
                    {
                        <tr>
                            <td>
                                @objCat.CountryName
                            </td>
                            <td>
                                <NavLink href="@($"country/edit/{objCat.Id}")" class="btn-primary btn">Edit</NavLink>
                                <button class="btn btn-danger" @onclick="()=>HandleDelete(objCat.Id)">Delete</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        else
        {
            if (IsLoading)
            {
                //loading gif
                <div class="text-center">
                    <img src="/images/loading.gif">
                </div>
            }
            else
            {
                //no records
                <p>No recrods found.</p>
            }
        }
    </div>
</div>

@code
{
    // private APIResponse APIResponse { get; set; } = new APIResponse();
    private IEnumerable<CountryDTO> Countries { get; set; } = new List<CountryDTO>();
    public bool IsLoading { get; set; }
    private int DeleteCountryId { get; set; } = 0;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadCategories();
        }
    }

    private async Task LoadCategories()
    {
        IsLoading = true;
        StateHasChanged();
        var response = await _countryService.GetAllAsync<APIResponse>();
        if (response != null && response.IsSuccess)
        {
            Countries = JsonConvert.DeserializeObject<List<CountryDTO>>(Convert.ToString(response.Result));
        }
        IsLoading = false;
        StateHasChanged();
    }

    private void HandleDelete(int id)
    {
        DeleteCountryId = id;
        _jsRuntime.InvokeVoidAsync("ShowDeleteConfirmationModal");
    }

    public async Task ConfirmDelete_Click(bool isConfirmed)
    {
        IsLoading = true;
        if (isConfirmed && DeleteCountryId != 0)
        {
            //delete
            await _countryService.DeleteAsync<APIResponse>(DeleteCountryId);
            await LoadCategories();
            await _jsRuntime.InvokeVoidAsync("HideDeleteConfirmationModal");
        }
        IsLoading = false;
    }
}
