@page "/applicationuser/update/{id}"
@using HelpingHands_Models.ViewModels;
@inject IJSRuntime _jsRuntime
@inject IApplicationRoleService _applicationroleservice
@inject IApplicationUserRoleService _userRoleService;
@inject IApplicationUserService _applicationuserservice
@inject NavigationManager _navigationManager

<div class="row my-2">
    <h3 class="card-title text-primary mb-3 ">Update Multiple Role</h3>

    <div class="col-10">
        @if (IsLoading)
        {
            <div class="text-center">
                <img src="/images/loading.gif">
            </div>
        }
        else
        {
            <EditForm Model="userVM" OnValidSubmit="MultipleRoleUpdate">
                <DataAnnotationsValidator />
                <div class="form-group">
                    <label>ApplicationUser Name</label>
                    <InputText @bind-Value="userVM.ApplicationUser.UserName" class="form-control"></InputText>
                    <ValidationMessage For="()=>userVM.ApplicationUser.UserName"></ValidationMessage>
                </div>
                <div class="form-group">
                    <label>Roles</label>
                    @if (userVM.ApplicationRoleList != null)
                    {
                        @foreach (var role in userVM.ApplicationRoleList)
                        {
                            <div class="form-check">
                                <input type="checkbox" class="form-check-input" id="@role.Id" @bind="role.IsChecked" />
                                <label class="form-check-label" for="@role.Id">@role.Name</label>
                            </div>
                        }
                    }
                </div>

                <div class="form-group py-2">
                    <button class="btn btn-primary">update</button>
                    <NavLink href="applicationuser" class="btn btn-secondary">Back to Index</NavLink>
                </div>
            </EditForm>
        }
    </div>

</div>

@code
{
    [Parameter]
    public string Id { get; set; }

    private UserVM userVM { get; set; } = new UserVM();


    private List<ApplicationUserRoleDTO> ApplicationUserRoleList { get; set; }

    public bool IsLoading { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadCountry();
        }
    }

    private async Task LoadCountry()
    {
        IsLoading = true;
        StateHasChanged();

        var response = await _applicationuserservice.GetAsync<APIResponse>(Id);
        if (response != null && response.IsSuccess)
        {
            userVM.ApplicationUser = JsonConvert.DeserializeObject<ApplicationUserDTO>(Convert.ToString(response.Result));
        }

        var UserRoleList = await _userRoleService.GetAllAsync<APIResponse>();
        if (UserRoleList != null && UserRoleList.IsSuccess)
        {
            var list = JsonConvert.DeserializeObject<List<ApplicationUserRoleDTO>>(Convert.ToString(UserRoleList.Result));
            ApplicationUserRoleList = list.Where(x => x.UserId == Id).ToList();
        }

        var ApplicationRoleList = await _applicationroleservice.GetAllAsync<APIResponse>();
        if (ApplicationRoleList != null && ApplicationRoleList.IsSuccess)
        {
            userVM.ApplicationRoleList = JsonConvert.DeserializeObject<List<ApplicationRoleDTO>>
                    (Convert.ToString(ApplicationRoleList.Result)).Select(i => new ApplicationRoleDTO
                        {
                            Name = i.Name,
                            Id = i.Id,
                            IsChecked = ApplicationUserRoleList.Where(x => x.RoleId == i.Id && x.UserId == Id).Any()
                        }).ToList();
        }
        IsLoading = false;
        StateHasChanged();
    }
    private async Task MultipleRoleUpdate()
    {
        userVM.ApplicationUserRoleList = userVM.ApplicationRoleList
            .Where(role => role.IsChecked)
            .Select(role => new ApplicationUserRoleDTO
                {
                    UserId = userVM.ApplicationUser.Id,
                    RoleId = role.Id
                })
            .ToList();

        var response = await _applicationuserservice.UpdateAsync<APIResponse>(userVM);
        if (response != null && response.IsSuccess)
        {
            await _jsRuntime.ToastrSuccess("Update sucessfully Role.");
            _navigationManager.NavigateTo("applicationuser");
        }
        else
        {
            if (response.ErrorMessages.Count > 0)
            {
                await _jsRuntime.ToastrError(response.ErrorMessages.FirstOrDefault());
            }
        }
        IsLoading = false;
    }

    private void ToggleCheckbox(int index)
    {
        userVM.ApplicationRoleList[index].IsChecked = !userVM.ApplicationRoleList[index].IsChecked;
    }
}
