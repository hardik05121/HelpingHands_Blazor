@page "/company"
@using HelpingHands_Models.Index;
@inject ICompanyService _companyService
@inject ICompanyUpload _companyUpload
@inject IJSRuntime _jsRuntime
@inject NavigationManager _NavigationManager
@inject IMapper _mapper
@* @using HelpingHands_Common
 @attribute [Authorize(Roles = SD.Role_Admin)] *@

<_DeleteConfirmation IsParentComponentProcessing="IsLoading" ConfirmationChanged="ConfirmDelete_Click"></_DeleteConfirmation>
<div class="container p-4 border border-dark p-3">
    <div class="row pb-2">
        <div class="col">
            <h4 class="text-primary">Company List</h4>
        </div>
        <div class="col-4 text-end pt-1">
            <a href="company/create" class="btn btn-primary form-control"><i class="bi bi-plus-square-fill px-1"></i>Create Company</a>
        </div>
    </div>


    <div class="row pb-2">
        <div class="d-flex">
            <span class="col-2">
                <input @bind="term" id="SearchBox" class="form-control" placeholder="Search by name" />
            </span>
            <span class="col-2 pl-2">
                <button @onclick="Search" class="btn btn-primary">Search</button>
            </span>
        </div>
    </div>

    @if (companyIndexVM.companies.Any())
    {
        <table class="table table-bordered table-striped">
            <thead>
                <tr>
                    <th>
                        <a @onclick="Pagination">Company Name<i class="bi bi-arrow-down-up"></i></a>
                    </th>
                    <th>
                       Detail Page
                    </th>
                    <th>
                        Amenity
                    </th>
                    <th>
                        Payment
                    </th>
                    <th>
                        Service
                    </th>
                    <th>
                        Image
                    </th>
                    <th></th>
                </tr>
            </thead>

            <tbody>
                @foreach (var item in companyIndexVM.companies)
                {
                    <tr>
                        <td>@item.CompanyName</td>
                        <td> <NavLink href="@($"thirdcategory/update/{item.Id}")" class="btn-primary btn"><i class="bi bi-pencil-square"></i>View Detail</NavLink></td>
                        <td> <NavLink href="@($"thirdcategory/update/{item.Id}")" class="btn-primary btn"><i class="bi bi-pencil-square"></i>Edit Amenity</NavLink></td>
                        <td> <NavLink href="@($"thirdcategory/update/{item.Id}")" class="btn-primary btn"><i class="bi bi-pencil-square"></i>Edit Payment</NavLink></td>
                        <td> <NavLink href="@($"thirdcategory/update/{item.Id}")" class="btn-primary btn"><i class="bi bi-pencil-square"></i>Edit Service</NavLink></td>
                        <td> <NavLink href="@($"thirdcategory/update/{item.Id}")" class="btn-primary btn"><i class="bi bi-pencil-square"></i>Edit Image</NavLink></td>
                        <td>
                            <NavLink href="@($"company/update/{item.Id}")" class="btn-primary btn"><i class="bi bi-pencil-square"></i>Edit</NavLink>
                            <button class="btn btn-danger" @onclick="()=>HandleDelete(item.Id)"><i class="bi bi-trash"></i>Delete</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>



        <nav aria-label="Page navigation example">
            <ul class="pagination">

                @if (companyIndexVM.CurrentPage > 1)
                {
                    <li class="page-item">
                        <a class="page-link" @onclick="() => HandlePageClick(companyIndexVM.Term, companyIndexVM.OrderBy, companyIndexVM.CurrentPage-1)" aria-label="Previous">

                            <span aria-hidden="true">&laquo;</span>
                        </a>
                    </li>
                }

                @for (int i = 1; i <= companyIndexVM.TotalPages; i++)
                {
                    var page = i;
                    if (i == companyIndexVM.CurrentPage)
                    {
                        <li class="page-item">
                            <a class="page-link active bg-primary" style="color: white;" @onclick="() => HandlePageClick(companyIndexVM.Term, companyIndexVM.OrderBy, page)">@i</a>
                        </li>
                    }
                    else
                    {
                        <li class="page-item">
                            <a class="page-link" @onclick="() => HandlePageClick(companyIndexVM.Term, companyIndexVM.OrderBy, page)">@i</a>
                        </li>
                    }
                }

                @if (companyIndexVM.CurrentPage < companyIndexVM.TotalPages)
                {
                    <li class="page-item">
                        <a class="page-link" @onclick="() => HandlePageClick(companyIndexVM.Term, companyIndexVM.OrderBy, companyIndexVM.CurrentPage+1)" aria-label="Next">

                            <span aria-hidden="true">&raquo;</span>
                        </a>
                    </li>
                }
            </ul>
        </nav>
    }
    else
    {
        if (IsLoading)
        {
            //loading gif
            <div class="text-center">
                <img src="/images/loading.gif">
            </div>
        }
        else
        {
            //no records
            <p>No recrods found.</p>
        }
    }
</div>



@code
{
    // private APIResponse APIResponse { get; set; } = new APIResponse();
    private CompanyIndexVM companyIndexVM { get; set; } = new CompanyIndexVM();
    private CompanyDTO Company { get; set; } = new CompanyDTO();
    public bool IsLoading { get; set; }
    private int DeleteId { get; set; } = 0;
    private string term = "";
    private string orderBy = "";
    private int currentPage = 1;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadCategories(term, orderBy, currentPage);
        }
    }

    private async Task LoadCategories(string term, string orderBy, int currentPage)
    {
        IsLoading = true;
        StateHasChanged();
        var response = await _companyService.CompanyByPagination<APIResponse>(term, orderBy, currentPage);
        if (response != null && response.IsSuccess)
        {
            companyIndexVM = JsonConvert.DeserializeObject<CompanyIndexVM>(Convert.ToString(response.Result));
        }
        IsLoading = false;
        StateHasChanged();
    }

    private void HandleDelete(int id)
    {
        DeleteId = id;
        _jsRuntime.InvokeVoidAsync("ShowDeleteConfirmationModal");
    }

    public async Task ConfirmDelete_Click(bool isConfirmed)
    {
        IsLoading = true;
        if (isConfirmed && DeleteId != 0)
        {
            // var res = await _companyService.GetAsync<APIResponse>(DeleteId);
            // if (res != null && res.IsSuccess)
            // {
            //     Company = JsonConvert.DeserializeObject<CompanyDTO>(Convert.ToString(res.Result));
            // }
            // if (!Company..Contains("default.png"))
            // {
            //     _companyUpload.DeleteFile(ThirdCategory.ThirdCategoryImage);
            // }
            try
            {
                var response = await _companyService.DeleteAsync<APIResponse>(DeleteId);
                if (response != null && response.IsSuccess)
                {
                    await _jsRuntime.ToastrSuccess("Data delete sucessfully.");
                    await LoadCategories(term, orderBy, currentPage);
                    await _jsRuntime.InvokeVoidAsync("HideDeleteConfirmationModal");
                }
            }
            catch (Exception e)
            {
                await _jsRuntime.ToastrError(e.Message);
                await LoadCategories(term, orderBy, currentPage);
                await _jsRuntime.InvokeVoidAsync("HideDeleteConfirmationModal");
            }

        }
        IsLoading = false;
    }

    private async Task HandlePageClick(string term, string orderBy, int currentPage)
    {
        this.term = term;
        this.orderBy = orderBy;
        this.currentPage = currentPage;
        await LoadCategories(term, orderBy, currentPage);
    }
    private async Task Search()
    {
        this.currentPage = 1;
        await LoadCategories(term, orderBy, currentPage);
    }
    private async Task Pagination()
    {
        this.orderBy = companyIndexVM.NameSortOrder;
        await LoadCategories(term, orderBy, currentPage);
    }
}