@page "/secondcategory/update/{id:int}"
@using Microsoft.AspNetCore.Mvc.Rendering;
@inject IJSRuntime _jsRuntime
@inject ISecondCategoryService _secondCategoryService
@inject NavigationManager _navigationManager
@inject IFirstCategoryService _firstCategoryService
@inject ISecondCategoryUpload _secondCategoryUpload
@inject IJSRuntime _jsRuntime
@*  @attribute [Authorize]  *@

<div class="row my-2">
    <h3 class="card-title text-primary mb-3 ml-3">Create SecondCategory</h3>

    <div class="col-10">
        @if (IsLoading)
        {
            <div class="text-center">
                <img src="/images/loading.gif">
            </div>
        }
        else
        {
            <EditForm Model="SecondCategory" OnValidSubmit="UpdateSecondCategory">
                <DataAnnotationsValidator />
                <div class="form-group">
                    <label>SecondCategory Name</label>
                    <InputText @bind-Value="SecondCategory.SecondCategoryName" class="form-control"></InputText>
                    <ValidationMessage For="()=>SecondCategory.SecondCategoryName"></ValidationMessage>
                </div>
                <div class="row pt-3">
                    <div class="form-group col-6">
                        <label>First Category</label>
                        <InputSelect @bind-Value="SecondCategory.FirstCategoryId" class="form-select">
                            <option value="0" disabled="disabled" selected>--Select FirstCategory--</option>
                            @foreach (var cat in FirstCategory)
                            {
                                <option value="@cat.Id">@cat.FirstCategoryName</option>
                            }

                        </InputSelect>
                        <ValidationMessage For="()=>SecondCategory.FirstCategoryId"></ValidationMessage>
                    </div>
                    <div class="form-group col-6">
                        <label>Image</label>
                        <InputFile OnChange="HandleImageUpload"></InputFile>
                    </div>
                    <div class="form-group col-6">
                        <div class="form-check">
                            <InputCheckbox @bind-Value="SecondCategory.IsActive" class="form-check-input" checked></InputCheckbox>
                            <label class="form-check-label">Is Active</label>
                        </div>
                    </div>
                </div>

                <div class="form-group py-2">
                    <button class="btn btn-primary">Update</button>
                    <NavLink href="secondcategory" class="btn btn-secondary">Back to Index</NavLink>
                </div>
            </EditForm>
        }
    </div>
    <div class="col-2">
        <img src="@SecondCategory.SecondCategoryImage" class="w-100">
    </div>
</div>

@code
{
    [Parameter]
    public int Id { get; set; }

    private SecondCategoryUpdateDTO SecondCategory { get; set; } = new()
        {
            SecondCategoryImage = "/images/default.png"
        };

    private IEnumerable<FirstCategoryDTO> FirstCategory { get; set; } = new List<FirstCategoryDTO>();
    public bool IsLoading { get; set; }
    public string OldImageUrl { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadData();
        }
    }

    private async Task LoadData()
    {
        IsLoading = true;
        StateHasChanged();

        var response = await _firstCategoryService.GetAllAsync<APIResponse>();
        if (response != null && response.IsSuccess)
        {
            FirstCategory = JsonConvert.DeserializeObject<List<FirstCategoryDTO>>(
                       Convert.ToString(response.Result));
            FirstCategory = FirstCategory.OrderBy(i => i.FirstCategoryName).ToList();
        }

        var res = await _secondCategoryService.GetAsync<APIResponse>(Id);
        if (res != null && res.IsSuccess)
        {
            SecondCategory = JsonConvert.DeserializeObject<SecondCategoryUpdateDTO>(Convert.ToString(res.Result));
            OldImageUrl = SecondCategory.SecondCategoryImage;
        }
        
        IsLoading = false;
        StateHasChanged();
    }


    private async Task UpdateSecondCategory()
    {
        if (OldImageUrl != SecondCategory.SecondCategoryImage)
        {
            _secondCategoryUpload.DeleteFile(OldImageUrl);

        }
        var response = await _secondCategoryService.UpdateAsync<APIResponse>(SecondCategory);
        if (response != null && response.IsSuccess)
        {
            await _jsRuntime.ToastrSuccess("Data update sucessfully.");
            _navigationManager.NavigateTo("secondcategory");
        }
        else
        {
            if (response.ErrorMessages.Count > 0)
            {
                await _jsRuntime.ToastrError(response.ErrorMessages.FirstOrDefault());
            }
        }
    }

    private async Task HandleImageUpload(InputFileChangeEventArgs e)
    {
        IsLoading = true;
        try
        {
            if (e.GetMultipleFiles().Count > 0)
            {
                foreach (var file in e.GetMultipleFiles())
                {
                    System.IO.FileInfo fileInfo = new System.IO.FileInfo(file.Name);
                    if (fileInfo.Extension.ToLower() == ".jpg" ||
                      fileInfo.Extension.ToLower() == ".png" ||
                      fileInfo.Extension.ToLower() == ".jpeg")
                    {
                        SecondCategory.SecondCategoryImage = await _secondCategoryUpload.UploadFile(file);
                    }
                    else
                    {
                        await _jsRuntime.ToastrError("Please select .jpg/.jpeg/.png file only");
                        return;
                    }
                }
            }
            IsLoading = false;
        }
        catch (Exception ex)
        {
            await _jsRuntime.ToastrError(ex.Message);
        }
    }
}
